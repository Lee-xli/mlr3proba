% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTaskSurvClassif.R
\name{mlr_pipeops_trafotask_survclassif}
\alias{mlr_pipeops_trafotask_survclassif}
\alias{PipeOpTaskSurvClassif}
\title{PipeOpTaskSurvClassif}
\description{
Transform \link{TaskSurv} to \link[mlr3:TaskClassif]{TaskClassif} by creating multiple
interval observations for each subject based on \code{cut}, with a \code{ped_status} variable
indicating whether an event occurred in each interval.
}
\section{Input and Output Channels}{

Input and output channels are inherited from \link[mlr3pipelines:PipeOp]{PipeOp}.

The output is the input \link{TaskSurv} transformed to a \link[mlr3:TaskClassif]{TaskClassif}
as well as the transformed data during prediction.
}

\section{State}{

The \verb{$state} contains information about the \code{cut} parameter used
as well as \code{time_var} and \code{event_var}, the names of the two target
columns of the survival task.
}

\section{Parameters}{

The parameters are
\itemize{
\item \code{cut :: numeric()}\cr
Split points, used to partition the data into intervals.
If unspecified, all unique event times will be used.
If \code{cut} is a single integer, it will be interpreted as the number of equidistant
intervals from 0 until the maximum event time.
\item \code{max_time :: numeric(1)}\cr
If cut is unspecified, this will be the last possible event time.
All event times after max_time will be administratively censored at max_time.
Needs to be greater than the minimum event time.
}
}

\examples{
\dontrun{
if (requireNamespace("mlr3pipelines", quietly = TRUE)) {
  library(mlr3)
  library(mlr3pipelines)

  task = tsk("lung")
  po = po("trafotask_survclassif")
  po$train(list(task))
  po$predict(list(task))[[1]]
}
}

}
\references{
Tutz, Gerhard, Schmid, Matthias (2016).
\emph{Modeling Discrete Time-to-Event Data},  series Springer Series in Statistics.
Springer International Publishing.
ISBN 978-3-319-28156-8 978-3-319-28158-2, \url{http://link.springer.com/10.1007/978-3-319-28158-2}.
}
\seealso{
Other PipeOps: 
\code{\link{PipeOpPredTransformer}},
\code{\link{PipeOpTaskTransformer}},
\code{\link{PipeOpTransformer}},
\code{\link{mlr_pipeops_survavg}},
\code{\link{mlr_pipeops_trafopred_classifsurv}},
\code{\link{mlr_pipeops_trafopred_regrsurv}},
\code{\link{mlr_pipeops_trafopred_survregr}},
\code{\link{mlr_pipeops_trafotask_regrsurv}},
\code{\link{mlr_pipeops_trafotask_survregr}}

Other Transformation PipeOps: 
\code{\link{mlr_pipeops_trafopred_classifsurv}},
\code{\link{mlr_pipeops_trafopred_regrsurv}},
\code{\link{mlr_pipeops_trafopred_survregr}},
\code{\link{mlr_pipeops_trafotask_regrsurv}},
\code{\link{mlr_pipeops_trafotask_survregr}}
}
\concept{PipeOps}
\concept{Transformation PipeOps}
\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{PipeOpTaskSurvClassif}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTaskSurvClassif-new}{\code{PipeOpTaskSurvClassif$new()}}
\item \href{#method-PipeOpTaskSurvClassif-clone}{\code{PipeOpTaskSurvClassif$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTaskSurvClassif-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTaskSurvClassif-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTaskSurvClassif$new(id = "trafotask_survclassif")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the resulting  object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTaskSurvClassif-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTaskSurvClassif-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTaskSurvClassif$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
