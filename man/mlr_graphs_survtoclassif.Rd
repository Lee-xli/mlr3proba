% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipelines.R
\name{mlr_graphs_survtoclassif}
\alias{mlr_graphs_survtoclassif}
\alias{pipeline_survtoclassif}
\title{Survival to Classification Reduction Pipeline}
\usage{
pipeline_survtoclassif(learner, cut = NULL, max_time = NULL)
}
\arguments{
\item{learner}{\link[mlr3:LearnerClassif]{LearnerClassif}\cr
Classification learner to fit to the transformed \link[mlr3:TaskClassif]{TaskClassif}. \code{learner} must have \code{prob} predict_type.}

\item{cut}{\code{numeric()}\cr
Split points, used to partition the data into intervals.
If unspecified, all unique event times will be used.}

\item{max_time}{\code{numeric(1)}\cr
If cut is unspecified, this will be the last possible event time.
All event times after max_time will be administratively censored at max_time.}
}
\value{
\link[mlr3pipelines:Graph]{mlr3pipelines::Graph} or \link[mlr3pipelines:mlr_learners_graph]{mlr3pipelines::GraphLearner}
}
\description{
Wrapper around multiple \link[mlr3pipelines:PipeOp]{PipeOp}s to help in creation
of complex survival reduction methods.
}
\examples{
\dontrun{
if (requireNamespace("mlr3pipelines", quietly = TRUE)) {
  library("mlr3")
  library("mlr3pipelines")

  task = tsk("rats")

  pipe = ppl(
    "survtoclassif",
    learner = lrn("classif.log_reg")
  )
  pipe$train(task)
  pipe$predict(task)

}
}
}
\seealso{
Other pipelines: 
\code{\link{mlr_graphs_crankcompositor}},
\code{\link{mlr_graphs_distrcompositor}},
\code{\link{mlr_graphs_probregr}},
\code{\link{mlr_graphs_survaverager}},
\code{\link{mlr_graphs_survbagging}},
\code{\link{mlr_graphs_survtoregr}}
}
\concept{pipelines}
